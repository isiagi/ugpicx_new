// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id           String   @id @default(cuid())
  title        String
  alt          String
  src          String
  photographer String
  description  String?
  email        String?
  website      String?
  instagram    String?
  twitter      String?
  category     String
  size         String
  price        Float?
  downloads    Int      @default(0)
  views        Int      @default(0)  // Add this line for quick view count
  userId       String?  @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Add relation to detailed view tracking
  imageViews   ImageView[]
}

// New model for detailed view tracking
model ImageView {
  id        String   @id @default(cuid())
  imageId   String
  ipAddress String
  userAgent String?
  referrer  String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@index([imageId])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("image_views")
}

// User model synced with Clerk
model User {
  id                String   @id // This will be Clerk's user ID
  email             String   @unique
  firstName         String?
  lastName          String?
  imageUrl          String?  // Profile image URL
  coverImageUrl     String?  // Cover/banner image URL
  username          String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastActiveAt      DateTime @default(now())
  
  // Profile information
  bio               String?
  website           String?
  instagram         String?
  twitter           String?
  linkedin          String?
  github            String?
  youtube           String?
  tiktok            String?
  location          String?
  
  // User preferences
  isPublic          Boolean  @default(true)
  emailNotifications Boolean @default(true)
  
  // Relations
  // images            Image[]
  // favorites         Favorite[]
  // downloads         Download[]
  // profileViews      ProfileView[]
  // viewedProfiles    ProfileView[] @relation("ViewerProfiles")
  
  @@map("users")
}